% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dict.R
\name{dict}
\alias{dict}
\alias{default_dict}
\alias{strict_dict}
\alias{immutable_dict}
\title{Creates a new dictionary}
\usage{
dict(...)

default_dict(..., .default = NULL)

strict_dict(...)

immutable_dict(...)
}
\arguments{
\item{...}{key and value pairs. All arguments must be named.}

\item{.default}{a default value to be returned when a non-existing key is accessed.}
}
\value{
a new dictionary object.
}
\description{
Creates a new dictionary based on the specified key-value pairs.
}
\details{
These functions are used to build a new dictionary object filled with the key = value pairs
passed as arguments. Typical dictionary objects are created using \code{dict}. If a key is not
specified, an implicit key is assumed using the name of the argument.

Dictionary objects are similar to named lists, but have a few advantages over them.

Firstly, all values contained in dictionary objects are always associated with a unique character key.
This means that values can only be accessed using their respective keys, and not using
integer indices, which is more consistent with the intended usage. Empty or
non-unique keys are strictly not allowed.

Secondly, keys are never partially matched; for instance, \code{my_dict$k} will not match
\code{my_dict$key} but will instead return \code{NULL}.

Dictionary object can store \code{NULL}s as values; assigning \code{NULL} to a key will
not delete that key from the dictionary, but set the value associated with that key to \code{NULL}.
To remove a key, use the \link{omit} function.

Finally, printing of dicts is more compact that printing named lists.

Dictionaries are implemented using named lists, so they can be passed to functions that
expect lists. They maintain keys in insertion order.

\code{default_dict} creates a dictionary with default values. When the user accesses a
non-existing key, the default value will be returned instead of \code{NULL}.

\code{strict_dict} creates a dictionary such that when the user accesses a non-existing key,
an exception will be raised instead of returning \code{NULL}.

\code{immutable_dict} creates a dictionary that cannot be modified (see \link{immutable}).
}
\examples{
person <- dict(name = "Joan", last_name = "Smith", age = 30)

color <- 'blue'
pattern <- 'vertical'
fill <- dict(color, pattern) # equivalent to dict(color="blue", pattern="vertical")

salaries <- default_dict(employee_A = 100, employee_B = 50,
                         employee_C = 75, .default = 60)

enumeration <- strict_dict(YES = 1, NO = 0)
}
